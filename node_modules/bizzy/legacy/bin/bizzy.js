#!/usr/bin/env node


'use strict';

var bizzy = require('..');
var glob = require('glob');
var argv = process.argv;

var args = require('minimist')(argv.slice(2), {
    alias: {
        v: 'version',
        h: 'help'
    },
    unknown: function unknown(cmd) {
        var name = info().name;

        console.error('\'%s\' is not a ' + name + ' option. See \'' + name + ' --help\'.', cmd);

        process.exit(-1);
    }
});

if (args.version) version();else if (args.help) help();else if (args.pack) getName(args.pack, function (name) {
    main('pack', name);
});else if (args.extract) getName(args.extract, function (name) {
    main('extract', name);
});else help();

function main(operation, file) {
    var cwd = process.cwd();
    var packer = bizzy(file, cwd);

    packer.on('error', function (error) {
        console.error(error.message);
    });

    packer.on('progress', function (percent) {
        process.stdout.write('\r' + percent + '%');
    });

    packer.on('end', function () {
        process.stdout.write('\n');
    });
}

function getName(str, fn) {
    glob(str, function (error, files) {
        if (error) return console.error(error.message);

        if (!files.length) return console.error('file not found');

        fn(files[0]);
    });
}

function version() {
    console.log('v' + info().version);
}

function info() {
    return require('../package');
}

function help() {
    var bin = require('../json/bin');
    var usage = 'Usage: ' + info().name + ' [path]';

    console.log(usage);
    console.log('Options:');

    Object.keys(bin).forEach(function (name) {
        var line = '  ' + name + ' ' + bin[name];
        console.log(line);
    });
}