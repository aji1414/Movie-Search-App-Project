'use strict';

var fs = require('fs');
var bzip2 = require('bzip2-maybe');
var util = require('util');
var assert = require('assert');
var Emitter = require('events').EventEmitter;
var tar = require('tar-fs');
var tarStream = require('tar-stream');
var pipe = require('pipe-io/legacy');

util.inherits(Bizzy, Emitter);

module.exports = bizzy;

function check(from, to) {
    assert(typeof from === 'string', 'from should be a string!');
    assert(typeof to === 'string', 'to should be a string!');
}

function bizzy(from, to) {
    return new Bizzy(from, to);
}

function Bizzy(from, to) {
    var _this = this;

    check(from, to);

    process.nextTick(function () {
        Emitter.call(_this);
        _this._i = 0;
        _this._n = 0;

        _this._percent = 0;
        _this._percentPrev = 0;

        _this._from = from;
        _this._to = to;

        _this._parse(from, function (error) {
            if (error) return _this._emitError(error);

            if (!_this._n) return _this._emitError(Error('No entries found'));

            return _this._extract();
        });
    });
}

Bizzy.prototype._emitError = function (e) {
    this._wasError = true;
    this.emit('error', e);
};

Bizzy.prototype._extract = function () {
    var _this2 = this;

    this.emit('start');

    var from = this._from;
    var to = this._to;
    var streamFile = fs.createReadStream(from);
    var streamUnbzip = bzip2();
    var streamUntar = tar.extract(to);

    streamUntar.on('entry', function (header) {
        _this2._progress();
        _this2.emit('file', header.name);
    });

    streamUntar.on('finish', function () {
        _this2.emit('end');
    });

    pipe([streamFile, streamUnbzip, streamUntar], function (e) {
        e && _this2._emitError(e);
    });
};

Bizzy.prototype._parse = function (name, callback) {
    var _this3 = this;

    var streamFile = fs.createReadStream(name);
    var streamUnbzip = bzip2();
    var streamParse = tarStream.extract();

    streamParse.on('entry', function (header, stream, callback) {
        stream.on('end', function () {
            ++_this3._n;

            callback();
        });

        stream.resume();
    });

    streamParse.on('finish', callback);

    pipe([streamFile, streamUnbzip, streamParse], function (error) {
        error && callback(error);
    });
};

Bizzy.prototype._progress = function () {
    ++this._i;

    var value = Math.round(this._i * 100 / this._n);

    this._percent = value;

    if (value !== this._percentPrev) {
        this._percentPrev = value;
        this.emit('progress', value);
    }
};